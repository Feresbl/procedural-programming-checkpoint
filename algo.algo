FUNCTION dot_product(v1, v2: array[0..n-1] of REAL): REAL;
VAR
    i: INTEGER;
    ps: REAL;
BEGIN
    ps := 0;
    FOR i := 0 TO n-1 DO
        ps := ps + v1[i]*v2[i];
    END_FOR
    RETURN ps;
END;

PROCEDURE check_orthogonal_vectors(V1, V2: array[0..n-1, 0..n-1] of REAL; 
                                   VAR is_orthogonal: array[0..n-1] of BOOLEAN);
VAR
    i: INTEGER;
BEGIN
    FOR i := 0 TO n-1 DO
        is_orthogonal[i] := (dot_product(V1[i], V2[i]) = 0);
    END_FOR
END;

VAR
    V1, V2: array[0..n-1, 0..n-1] of REAL;
    is_orthogonal: array[0..n-1] of BOOLEAN;
    i: INTEGER;
BEGIN
    // Read vectors V1 and V2
    FOR i := 0 TO n-1 DO
        Read(V1[i]);
        Read(V2[i]);
    END_FOR
    
    // Check if vectors are orthogonal
    check_orthogonal_vectors(V1, V2, is_orthogonal);
    
    // Output results
    FOR i := 0 TO n-1 DO
        IF is_orthogonal[i] THEN
            Write("Vector ", i+1, " is orthogonal.");
        ELSE
            Write("Vector ", i+1, " is not orthogonal.");
        END_IF
    END_FOR
END
//2eme etape
ALGORITHM insertion_sort(arr: ARRAY of INTEGER, n: INTEGER)
VAR
    i, j, temp: INTEGER;
BEGIN
    FOR i FROM 1 TO n-1 DO
        temp := arr[i];
        j := i-1;
        WHILE j >= 0 AND arr[j] > temp DO
            arr[j+1] := arr[j];
            j := j-1;
        END_WHILE
        arr[j+1] := temp;
    END_FOR
END